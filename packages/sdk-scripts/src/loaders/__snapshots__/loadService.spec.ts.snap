// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`loadService should work 1`] = `
Array [
  Array [
    "dist/src/api/cd/package/autoDiscovery.ts",
    "import { http, HttpOptions } from \\"@easyops/brick-http\\";

/** 请求体 */
export type AutoDiscoveryRequestBody = AutoDiscoveryRequestBody_item[];

export interface AutoDiscoveryResponseBody {
  /** 返回码 */
  code: number;

  /** 错误信息 */
  error: string;

  /** 返回消息 */
  message: string;
}

/** 实例自动发现的接口 */
export const autoDiscovery = (
  objectId: string | number,
  data: AutoDiscoveryRequestBody,
  options?: HttpOptions
): Promise<AutoDiscoveryResponseBody> =>
  http.post<AutoDiscoveryResponseBody>(
    \`api/gateway/cd.package.AutoDiscovery/object/\${objectId}/instance/_import-json\`,
    data,
    options
  );

export interface AutoDiscoveryRequestBody_item {
  /** 筛选器 */
  filter?: Record<string, any>;

  /** 更新数据 */
  update?: Record<string, any>;

  /** 存在即更新 */
  upsert?: boolean;
}
",
  ],
  Array [
    "dist/src/api/cd/package/create.ts",
    "import { http, HttpOptions } from \\"@easyops/brick-http\\";
import { ModelPackage } from \\"../../../model/cd\\";

export interface CreateRequestBody {
  /** 包名称 */
  name: string;

  /** 版本类型 1 开发, 3 测试, 7 预发布, 15 生产 */
  type: 1 | 3 | 7 | 15;

  /** 包分类 */
  cId: 1;

  /** 备注说明 */
  memo: string;

  /** 安装路径 */
  installPath: string;

  /** 平台 */
  platform: \\"linux\\" | \\"windows\\" | \\"others\\";

  /** 包文件源 */
  source?: string;

  /** 包分类标签 */
  category?: string;

  /** 包图标 */
  icon?: string;

  /** 包图标样式(颜色) */
  style?: string;
}

export type CreateResponseBody = Partial<ModelPackage> & CreateResponseBody_2;

/** 创建包 */
export const create = (
  data: CreateRequestBody,
  options?: HttpOptions
): Promise<CreateResponseBody> =>
  http.post<CreateResponseBody>(
    \\"api/gateway/cd.package.Create/package\\",
    data,
    options
  );

export interface CreateResponseBody_2 {
  /** 包Id */
  packageId: string;

  /** 包名称 */
  name: string;

  /** 版本类型 1 开发, 3 测试, 7 预发布, 15 生产 */
  type: 1 | 3 | 7 | 15;

  /** 包分类 */
  cId: 1;

  /** 备注说明 */
  memo: string;

  /** 安装路径 */
  installPath: string;

  /** 平台 */
  platform: \\"linux\\" | \\"windows\\" | \\"others\\";

  /** 包文件源 */
  source: string;

  /** 包分类标签 */
  category: string;

  /** 包图标 */
  icon: string;

  /** 包图标样式(颜色) */
  style: string;
}
",
  ],
  Array [
    "dist/src/api/cd/package/get.ts",
    "import { http, HttpOptions } from \\"@easyops/brick-http\\";
import { ModelPackageWithVersion } from \\"../../../model/cd\\";
import { ResponseBodyWrapper } from \\"../../../wrapper\\";

export interface GetRequestParams {
  /** 包Id */
  packageId?: string;

  /** 版本Id */
  versionId?: string;

  /** 语言 */
  lang?: string;
}

export interface GetResponseBody {
  /** 最新版本信息 */
  lastVersionInfo?: ModelPackageWithVersion[\\"lastVersionInfo\\"];

  /** MAP */
  mapField?: Record<string, any>;

  /** MAPS */
  mapsField?: Record<string, any>[];
}

/** 获取包 */
export const get = async (
  params: GetRequestParams,
  options?: HttpOptions
): Promise<GetResponseBody> =>
  (
    await http.get<ResponseBodyWrapper<GetResponseBody>>(
      \\"api/gateway/cd.package.Get/packages/pkg\\",
      { ...options, params }
    )
  ).data;
",
  ],
  Array [
    "dist/src/api/cd/package/retry.ts",
    "import { http, HttpOptions } from \\"@easyops/brick-http\\";
import { ResponseBodyWrapper } from \\"../../../wrapper\\";

export interface RetryResponseBody {
  /** build id */
  id?: string;
}

/** 重试 */
export const retry = async (
  build_id: string | number,
  options?: HttpOptions
): Promise<RetryResponseBody> =>
  (
    await http.post<ResponseBodyWrapper<RetryResponseBody>>(
      \`api/gateway/cd.package.Retry/api/pipeline/v1/builds/\${build_id}/retry\`,
      undefined,
      options
    )
  ).data;
",
  ],
  Array [
    "dist/src/api/cd/package/search.ts",
    "import { http, HttpOptions } from \\"@easyops/brick-http\\";
import { ModelPackage, ModelPackageExt } from \\"../../../model/cd\\";
import { ResponseListWrapper, ResponseBodyWrapper } from \\"../../../wrapper\\";

export interface SearchRequestParams {
  /** 包名称 */
  name: string;

  /** page number */
  page?: number;

  /** size of each page */
  pageSize?: number;

  /** the field need to sort */
  order?: string;
}

export type SearchResponseItem = ModelPackage & SearchResponseItem_2;

export type SearchResponseBody = ResponseListWrapper<SearchResponseItem>;

/** 搜索包 (支持模糊搜索) */
export const search = async (
  params: SearchRequestParams,
  options?: HttpOptions
): Promise<SearchResponseBody> =>
  (
    await http.get<ResponseBodyWrapper<SearchResponseBody>>(
      \\"api/gateway/cd.package.Search/packages/search\\",
      { ...options, params }
    )
  ).data;

export interface SearchResponseItem_2 {
  /** 最新版本信息 */
  lastVersionInfo: ModelPackageExt[\\"lastVersionInfo\\"];
}
",
  ],
  Array [
    "dist/src/api/cd/package/upload.ts",
    "import { http, HttpOptions } from \\"@easyops/brick-http\\";

/** params */
export interface UploadRequestParams {
  /** 版本 ID */
  versionId?: string;
}

/** others */
export interface UploadRequestBody {
  /** 文件 */
  sourceFile?: File[];

  /** 编码 */
  encoding?: string[];
}

/** 上传包 */
export const upload = (
  packageId: string | number,
  params: UploadRequestParams,
  data: UploadRequestBody,
  options?: HttpOptions
): Promise<Blob> => {
  const _formData = new FormData();
  for (const [key, value] of Object.entries(data)) {
    if (Array.isArray(value)) {
      const k = \`\${key}[]\`;
      value.forEach((v) => {
        _formData.append(k, v);
      });
    } else {
      _formData.append(key, value);
    }
  }
  return http.post<Blob>(
    \`api/gateway/cd.package.Upload/packages/pkg/\${packageId}/upload\`,
    _formData,
    { ...options, params, responseType: \\"blob\\" }
  );
};
",
  ],
  Array [
    "dist/src/model/cd/ModelPackage.ts",
    "/** 包模型 */
export interface ModelPackage {
  /** 包Id */
  packageId: string;

  /** 包名称 */
  name: string;

  /** 版本类型 1 开发, 3 测试, 7 预发布, 15 生产 */
  type: 1 | 3 | 7 | 15;

  /** 包分类 */
  cId: 1;

  /** 包文件源 */
  source: string;

  /** 备注说明 */
  memo: string;

  /** 安装路径 */
  installPath: string;

  /** 平台 */
  platform: \\"linux\\" | \\"windows\\" | \\"others\\";

  /** 包分类标签 */
  category: string;

  /** 包图标 */
  icon: string;

  /** 包图标样式(颜色) */
  style: string;

  /** ctime */
  ctime: string;

  /** mtime */
  mtime: string;
}
",
  ],
  Array [
    "dist/src/model/cd/ModelVersion.ts",
    "/** 程序包版本 */
export interface ModelVersion {
  /** 版本名称 */
  name: string;

  /** 版本Id */
  versionId: string;

  /** 包Id */
  packageId: string;

  /** 版本类型 1 开发, 3 测试, 7 预发布, 15 生产 */
  env_type: 1 | 3 | 7 | 15;

  /** 创建时间 */
  ctime: string;

  /** 修改时间 */
  mtime: string;
}
",
  ],
  Array [
    "dist/src/model/cd/ModelPackageWithVersion.ts",
    "import { ModelVersion } from \\".\\";

/** 包带版本的模型 */
export interface ModelPackageWithVersion {
  /** 最新版本信息 */
  lastVersionInfo: Partial<ModelVersion>[];

  /** 描述 */
  desc: string;
}
",
  ],
  Array [
    "dist/src/model/cd/ModelPackageExt.ts",
    "/** 包模型 */
export interface ModelPackageExt {
  /** 最新版本信息 */
  lastVersionInfo: ModelPackageExt_2_lastVersionInfo;

  /** 包实例数量 */
  instanceCount: number;
}

export interface ModelPackageExt_2_lastVersionInfo {
  /** 创建时间 */
  ctime?: string;

  /** 版本类型 1 开发, 3 测试, 7 预发布, 15 生产 */
  env_type?: 1 | 3 | 7 | 15;

  /** 版本名称 */
  name?: string;

  /** 版本Id */
  versionId?: string;
}
",
  ],
  Array [
    "dist/src/api/cd/package/index.ts",
    "export * from \\"./autoDiscovery\\";
export * from \\"./create\\";
export * from \\"./get\\";
export * from \\"./retry\\";
export * from \\"./search\\";
export * from \\"./upload\\";
",
  ],
  Array [
    "dist/src/model/cd/index.ts",
    "export * from \\"./ModelPackage\\";
export * from \\"./ModelVersion\\";
export * from \\"./ModelPackageWithVersion\\";
export * from \\"./ModelPackageExt\\";
",
  ],
  Array [
    "dist/src/index.ts",
    "import * as PackageApi from \\"./api/cd/package\\";
import * as CdModels from \\"./model/cd\\";
export { PackageApi, CdModels };
",
  ],
  Array [
    "dist/deploy/contracts.yaml",
    "depend_contracts:
  - name: easyops.api.cd.package.AutoDiscovery
    version: ^1.0.0
  - name: easyops.api.cd.package.Create
    version: ^1.0.0
  - name: easyops.api.cd.package.Get
    version: ^1.0.0
  - name: easyops.api.cd.package.Retry
    version: ^1.0.0
  - name: easyops.api.cd.package.Search
    version: ^1.0.0
  - name: easyops.api.cd.package.Upload
    version: ^1.0.0
",
  ],
]
`;
